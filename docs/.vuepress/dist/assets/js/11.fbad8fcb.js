(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{361:function(a,t,s){"use strict";s.r(t);var r=s(42),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"javascript执行机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript执行机制"}},[a._v("#")]),a._v(" javascript执行机制")]),a._v(" "),s("h2",{attrs:{id:"js执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js执行上下文"}},[a._v("#")]),a._v(" js执行上下文")]),a._v(" "),s("ul",[s("li",[a._v("只有理解了 JavaScrip 的执行上下文，你才能更好地理解 JavaScript 语言本身,比如变量提升、作用域和闭包等.")])]),a._v(" "),s("h3",{attrs:{id:"变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[a._v("#")]),a._v(" 变量提升")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("showName()\nconsole.log(myname)\nvar myname = '极客时间'\nfunction showName() {   \n  console.log('函数 showName 被执行');\n}\n当执行到第 1 行的时候，由于函数 showName 还没有定义，所以执行应该会报错；同样执行第 2 行的时候，由于变量 myname 函数也未定义，所以同样也会报错。\n")])])]),s("p",[s("img",{attrs:{src:"/Occam-s-Razor.github.io/complie.jpg",alt:"create"}})]),a._v(" "),s("h4",{attrs:{id:"编译阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段"}},[a._v("#")]),a._v(" 编译阶段")]),a._v(" "),s("ul",[s("li",[a._v("变量提升部分的代码。")])]),a._v(" "),s("h4",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("p",[a._v("JavaScript 代码执行过程中，需要先做变量提升，而之所以需要实现变量提升，是因为JavaScript 代码在执行之前需要先编译。在编译阶段，变量和函数会被存放到变量环境中，变量的默认值会被设置为undefined；在代码执行阶段，JavaScript 引擎会从变量环境中去查找自定义的变量和函数。如果在编译阶段，存在两个相同的函数，那么最终存放在变量环境中的是最后定义的那个，这是因为后定义的会覆盖掉之前定义的  "),s("strong",[a._v("javascript的执行机制 先编译再执行")]),a._v("。")])])}),[],!1,null,null,null);t.default=e.exports}}]);