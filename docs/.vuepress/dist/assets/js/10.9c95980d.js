(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{375:function(n,t,e){"use strict";e.r(t);var r=e(42),s=Object(r.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"字符串操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串操作"}},[n._v("#")]),n._v(" 字符串操作")]),n._v(" "),e("h2",{attrs:{id:"反转数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反转数组"}},[n._v("#")]),n._v(" 反转数组")]),n._v(" "),e("ul",[e("li",[n._v("给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("方法一:\nfunction reverseStr(x) {\n    if (typeof x != number) {\n        return\n    }\n    const max = Number.POSITIVE_INFINITY;\n    const min = Number.NEGATIVE_INFINITY;\n\n    const rest = x > 0 ? \n    x.toString()\n     .split('')\n     .reverse()\n     .join('') \n    : x.toString()\n        .split('')\n        .slice(1)\n        .reverse()\n        .join('')\n    const result = x > 0 ? parseInt(rest, 10) : 0 - parseInt(rest, 10);\n    if (result <= max && result >= min) {\n        return result;\n    }\n    return 0;\n}\n\n\n方法二:\n\nfunction reverseStr(x) {\n    let int = Math.abs(x);\n    const max = Number.POSITIVE_INFINITY;\n    const min = Number.NEGATIVE_INFINITY;\n\n    let num = 0;\n    while(int != 0) {\n        num = (int % 10) + (num * 10);\n        int = Math.floor(int / 10);\n    }\n    if (num >= max || num < min) {\n        return 0;\n    }\n    if (x < 0) {\n        num *= -1;\n    }\n    return num;\n}\n\nconsole.log(reverseStr(-123));\n")])])]),e("ul",[e("li",[n._v("复杂度分析 时间复杂度: O(n) 空间复杂度 O(1)")])]),n._v(" "),e("h2",{attrs:{id:"有效的字母异位词"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有效的字母异位词"}},[n._v("#")]),n._v(" 有效的字母异位词")]),n._v(" "),e("ul",[e("li",[n._v('给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。字母异位词 s = "anagram", t = "nagaram" 是字母异位词  输入:s="rat",t="car" 2 输出: false')])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const isAnagram = function(s, t) {\n    if (s.length != t.length) {\n        return false;\n    }\n    const sArr = s.split('');\n    const tArr = t.split('');\n    const sortFn = (a, b) => {\n        return a.charCodeAt() - b.charCodeAt();\n    }\n    sArr.sort(sortFn);\n    tArr.sort(sortFn);\n    return sArr.join('') == sArr.join('');\n}\n")])])]),e("ul",[e("li")]),n._v(" "),e("p",[n._v("时间复杂度: O(nlogn)\nJavaScript 的 sort 方法的实现原理，当数组长度小于等于 10 的时候，采用插入排序，大\n于10的时候，采用快排，快排的平均时间复杂度是 O(nlogn)。\n空间复杂度: O(n) 算法中申请了 2 个数组变量用于存放字符串分割后的字符串数组，所以数 组 空间长度跟字符串长度线性相关，所以为 O(n)。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("方法二: \nconst isAnagram = function (s, t) {\n    if (s.length != t.length) {\n        return false;\n    }\n    const hashK = {}\n    for(k of s) {\n        if (hashK[k]) {\n            hashK[k] = hashK[k] + 1;\n        } else {\n            hashK[k] = 1;\n        }\n    }\n    for(kt of t) {\n        if (hashK[kt]) {\n            hashK[kt] = hashK[kt] - 1;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n")])])]),e("ul",[e("li",[n._v("复杂度分析:时间复杂度: O(n)  空间复杂度: O(1)")])]),n._v(" "),e("h2",{attrs:{id:"报数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#报数"}},[n._v("#")]),n._v(" 报数")]),n._v(" "),e("ul",[e("li",[n._v('报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数  输入:4， 输出: "1211"')])]),n._v(" "),e("p",[n._v("1\n11\n21\n1211\n111221")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("方法一: 递归\nconst constcountAndSay = function(n) {\n    if (n == 1) {\n        return '1';\n    }\n    const preResult = constcountAndSay(n - 1);\n    return preResult.replace(/(\\d)\\1*/g, item => `${item.length}${item[0]}`);\n}\n\n方法二:循环\n\nconst constcountAndSay = function(n) {\n    if (n == 1) {\n        return '1';\n    }\n    let j = 1;\n    let preResult = '';\n    while(n > j) {\n        if (j == 1) {\n            preResult = '1';\n        }\n        ++j;\n        preResult = preResult.replace(/(\\d)\\1*/g, item => `${item.length}${item[0]}`);\n    }\n    return preResult;\n}\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);